#pragma once
#include <string>
#include <cstdint>
#include <optional>
#include <sstream>

enum class TokenKind {
  Tok_Any,
  Tok_Number,
  Tok_Never,
  Tok_Boolean,
  Tok_String,
  Tok_Unique,
  Tok_Symbol,
  Tok_Undefined,
  Tok_Object,
  Tok_EOF,
  Tok_Print,
  Tok_Break,
  Tok_Do,
  Tok_Instanceof,
  Tok_Typeof,
  Tok_Case,
  Tok_Else,
  Tok_New,
  Tok_Var,
  Tok_Catch,
  Tok_Finally,
  Tok_Return,
  Tok_Void,
  Tok_Continue,
  Tok_For,
  Tok_Switch,
  Tok_While,
  Tok_Debugger,
  Tok_Function,
  Tok_This,
  Tok_With,
  Tok_Default,
  Tok_If,
  Tok_Throw,
  Tok_Delete,
  Tok_In,
  Tok_Try,
  Tok_As,
  Tok_From,
  Tok_Of,
  Tok_Yield,
  Tok_YieldStar,
  Tok_Class,
  Tok_Enum,
  Tok_Extends,
  Tok_Super,
  Tok_Const,
  Tok_Export,
  Tok_Import,
  Tok_Async,
  Tok_Await,
  Tok_Implements,
  Tok_Private,
  Tok_Public,
  Tok_Interface,
  Tok_Package,
  Tok_Protected,
  Tok_Static,
  Tok_StrictLet,
  Tok_NonStrictLet,
  Tok_LParen,
  Tok_RParen,
  Tok_LBrace,
  Tok_RBrace,
  Tok_LBracket,
  Tok_RBracket,
  Tok_Semi,
  Tok_Comma,
  Tok_Assign,
  Tok_Arrow,
  Tok_Question,
  Tok_QuestionDot,
  Tok_Colon,
  Tok_Ellipsis,
  Tok_Dot,
  Tok_Plus,
  Tok_PlusPlus,
  Tok_PlusAssign,
  Tok_Minus,
  Tok_MinusMinus,
  Tok_MinusAssign,
  Tok_BitNot,
  Tok_Not,
  Tok_Multiply,
  Tok_Divide,
  Tok_Modulus,
  Tok_ModulusAssign,
  Tok_Power,
  Tok_PowerAssign,
  Tok_NullishCoalescingAssign,
  Tok_MultiplyAssign,
  Tok_NullCoalesce,
  Tok_Hashtag,
  Tok_RightShiftArithmetic,
  Tok_RightShiftArithmeticAssign,
  Tok_RightShiftLogical,
  Tok_RightShiftLogicalAssign,
  Tok_MoreThan,
  Tok_GreaterThanEquals,
  Tok_LeftShiftArithmetic,
  Tok_LeftShiftArithmeticAssign,
  Tok_LessThan,
  Tok_LessThanEquals,
  Tok_Equals,
  Tok_IdentityEquals,
  Tok_NotEquals,
  Tok_IdentityNotEquals,
  Tok_BitAnd,
  Tok_LogicalAnd,
  Tok_BitAndAssign,
  Tok_BitXor,
  Tok_BitXorAssign,
  Tok_BitOr,
  Tok_LogicalOr,
  Tok_BitOrAssign,
  Tok_DivideAssign,
  Tok_NullLiteral,
  Tok_BooleanLiteral,
  Tok_RegularExpressionLiteral,
  Tok_BackTick,
  Tok_StringLiteral,
  Tok_TemplateStringAtom,
  Tok_TemplateStringStartExpression,
  Tok_TemplateCloseBrace,
  Tok_DecimalLiteral,
  Tok_BigDecimalIntegerLiteral,
  Tok_HexIntegerLiteral,
  Tok_BigHexIntegerLiteral,
  Tok_OctalIntegerLiteral,
  Tok_OctalIntegerLiteral2,
  Tok_BigOctalIntegerLiteral,
  Tok_BinaryIntegerLiteral,
  Tok_BigBinaryIntegerLiteral,
  Tok_Integer,
  Tok_Identifier,
  Tok_Invalid
};

struct Token {
  TokenKind kind;
  std::string text; // raw text for the token
  size_t pos{0};    // start position in source
  std::optional<int64_t> intValue; // parsed integer value for integer tokens
};

// Debug helper
std::string tokenToString(const Token &t);
